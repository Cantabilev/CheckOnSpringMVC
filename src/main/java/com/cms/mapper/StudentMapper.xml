<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cms.mapper.StudentMapper">
    <!--引入BaseMapper功能，增删列优先用生成器生成新的文件，若有新的sql语句，请在最后面加入-->
    <resultMap id="BaseResultMap" type="com.cms.domain.StudentInfo">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="account" property="account" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="gender" property="gender" jdbcType="SMALLINT" />
        <result column="grade_id" property="gradeId" jdbcType="INTEGER" />
        <result column="academy_id" property="academyId" jdbcType="INTEGER" />
        <result column="specialty_id" property="specialtyId" jdbcType="INTEGER" />
        <result column="class_id" property="classId" jdbcType="INTEGER" />
        <result column="state" property="state" jdbcType="SMALLINT" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, account, password, name, gender, grade_id, academy_id, specialty_id, class_id, state
    </sql>

    <insert id="insert" parameterType="com.cms.domain.StudentInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into t_student
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="account != null" >
                account,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="gender != null" >
                gender,
            </if>
            <if test="gradeId != null" >
                grade_id,
            </if>
            <if test="academyId != null" >
                academy_id,
            </if>
            <if test="specialtyId != null" >
                specialty_id,
            </if>
            <if test="classId != null" >
                class_id,
            </if>
            <if test="state != null" >
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="account != null" >
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null" >
                #{gender,jdbcType=SMALLINT},
            </if>
            <if test="gradeId != null" >
                #{gradeId,jdbcType=INTEGER},
            </if>
            <if test="academyId != null" >
                #{academyId,jdbcType=INTEGER},
            </if>
            <if test="specialtyId != null" >
                #{specialtyId,jdbcType=INTEGER},
            </if>
            <if test="classId != null" >
                #{classId,jdbcType=INTEGER},
            </if>
            <if test="state != null" >
                #{state,jdbcType=SMALLINT},
            </if>
        </trim>
    </insert>


    <update id="update" parameterType="com.cms.domain.StudentInfo" >
        update t_student
        <set >
            <if test="account != null" >
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null" >
               gender =  #{gender,jdbcType=SMALLINT},
            </if>
            <if test="gradeId != null" >
                grade_id = #{gradeId,jdbcType=INTEGER},
            </if>
            <if test="academyId != null" >
                academy_id = #{academyId,jdbcType=INTEGER},
            </if>
            <if test="specialtyId != null" >
                specialty_id = #{specialtyId,jdbcType=INTEGER},
            </if>
            <if test="classId != null" >
                class_id = #{classId,jdbcType=INTEGER},
            </if>
            <if test="state != null" >
                state = #{state,jdbcType=SMALLINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>


    <select id="list" parameterType="com.core.dao.query.Query" resultMap="BaseResultMap" >
        select <include refid="Base_Column_List" />  from t_student
        <include refid="whereReference" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>


    <select id="findOne" parameterType="com.core.dao.query.Query" resultMap="BaseResultMap" >
        select <include refid="Base_Column_List" />  from t_student
        <include refid="whereReference" />
        <include refid="rowLockReference"/>
    </select>


    <select id="count" parameterType="com.core.dao.query.Query" resultType="java.lang.Integer" >
        select count(*) from t_student
        <include refid="whereReference" />
    </select>


    <sql id="whereReference">
        <where>
            <foreach collection="filters" index="filter" item="value">
                <choose>
                    <when test="filter.operator == 'in' || filter.operator == 'not in'">
                        ${filter.calculation} ${filter.column} ${filter.operator}
                        <foreach collection="value" index="index" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </when>
                    <when test="filter.operator == 'between'">
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value.left} and #{value.right}
                    </when>
                    <when test="filter.calculation == 'or'">
                        <include refid="orFilter"/>
                    </when>
                    <otherwise>
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value}
                    </otherwise>
                </choose>
            </foreach>
        </where>
    </sql>

    <sql id="orFilter">
        ${filter.calculation}
        <foreach collection="value" index="subFilter" item="subValue" open="(" separator="and" close=")">
            <choose>
                <when test="subFilter.operator == 'in' || subFilter.operator == 'not in'">
                    ${subFilter.column} ${subFilter.operator}
                    <foreach collection="subValue" index="subIndex" item="subItem" open="(" separator="," close=")">
                        #{subItem}
                    </foreach>
                </when>
                <otherwise>
                    ${subFilter.column} ${subFilter.operator} #{subValue}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="orderReference">
        <if test="orders != null and orders.size > 0">
            order by
            <foreach collection="orders" index="order" item="value" separator="," >
                ${order.column} ${order.direction}
            </foreach>
        </if>
    </sql>

    <sql id="pageReference">
        <if test="pageParam != null">
            limit #{pageParam.start},#{pageParam.limit}
        </if>
    </sql>

    <sql id="rowLockReference">
        <if test="rowLock != null and rowLock == true">
            for update
        </if>
    </sql>
    <!--引入BaseMapper功能，若有新的sql语句，请在这里开始加入-->

    <resultMap id="BaseResultMapVO" type="com.cms.vo.StudentVO" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="account" property="account" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="gender" property="gender" jdbcType="SMALLINT" />
        <result column="grade_id" property="gradeId" jdbcType="INTEGER" />
        <result column="academy_id" property="academyId" jdbcType="INTEGER" />
        <result column="specialty_id" property="specialtyId" jdbcType="INTEGER" />
        <result column="class_id" property="classId" jdbcType="INTEGER" />
        <result column="state" property="state" jdbcType="SMALLINT" />
        <result column="grade_name" property="gradeName" jdbcType="VARCHAR" />
        <result column="academy_name" property="academyName" jdbcType="VARCHAR" />
        <result column="specialty_name" property="specialtyName" jdbcType="VARCHAR" />
        <result column="specialty_code" property="specialtyCode" jdbcType="VARCHAR" />
        <result column="class_name" property="className" jdbcType="VARCHAR" />
        <result column="class_code" property="classCode" jdbcType="VARCHAR" />

    </resultMap>

    <sql id="Base_Column_List_VO" >
        view_student.*
    </sql>
    <select id="listVO" parameterType="com.core.dao.query.Query" resultMap="BaseResultMapVO" >
        select <include refid="Base_Column_List_VO" />  from view_student
        <include refid="whereReference" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>
    <select id="countVO" parameterType="com.core.dao.query.Query" resultType="java.lang.Integer" >
        select count(*) from view_student
        <include refid="whereReference" />
    </select>
</mapper>