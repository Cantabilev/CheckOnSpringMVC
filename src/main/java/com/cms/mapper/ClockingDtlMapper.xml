<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cms.mapper.ClockingDtlMapper">
    <!--引入BaseMapper功能，增删列优先用生成器生成新的文件，若有新的sql语句，请在最后面加入-->
    <resultMap id="BaseResultMap" type="com.cms.domain.ClockingDtlInfo">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="clocking_id" property="clockingId" jdbcType="INTEGER" />
        <result column="course_dtl_id" property="courseDtlId" jdbcType="INTEGER" />
        <result column="course_code" property="courseCode" jdbcType="INTEGER" />
        <result column="student_account" property="studentAccount" jdbcType="VARCHAR" />
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />
        <result column="mac" property="mac" jdbcType="VARCHAR" />
        <result column="longitude" property="longitude" jdbcType="DOUBLE" />
        <result column="latitude" property="latitude" jdbcType="DOUBLE" />
        <result column="state" property="state" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, clocking_id, course_dtl_id, course_code, student_account, submit_time, mac, longitude, latitude, state
    </sql>

    <insert id="insert" parameterType="com.cms.domain.ClockingDtlInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into t_clocking_dtl
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="clockingId != null" > clocking_id, </if>
            <if test="courseDtlId != null" > course_dtl_id, </if>
            <if test="courseCode != null" > course_code, </if>
            <if test="studentAccount != null" > student_account, </if>
            <if test="submitTime != null" > submit_time, </if>
            <if test="mac != null" > mac, </if>
            <if test="longitude != null" > longitude, </if>
            <if test="latitude != null" > latitude, </if>
            <if test="state != null" > state, </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="clockingId != null" > #{clockingId,jdbcType=INTEGER}, </if>
            <if test="courseDtlId != null" > #{courseDtlId,jdbcType=INTEGER}, </if>
            <if test="courseCode != null" > #{courseCode,jdbcType=INTEGER}, </if>
            <if test="studentAccount != null" > #{studentAccount,jdbcType=VARCHAR}, </if>
            <if test="submitTime != null" > #{submitTime,jdbcType=TIMESTAMP}, </if>
            <if test="mac != null" > #{mac,jdbcType=VARCHAR}, </if>
            <if test="longitude != null" > #{longitude,jdbcType=DOUBLE}, </if>
            <if test="latitude != null" > #{latitude,jdbcType=DOUBLE}, </if>
            <if test="state != null" > #{state,jdbcType=INTEGER}, </if>
        </trim>
    </insert>

    <!-- 批量插入数据 -->
    <insert id="insertBatch" parameterType="java.util.List"
            useGeneratedKeys="true">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
        insert into t_clocking_dtl
        (clocking_id, course_dtl_id, course_code, student_account, state)
        values
        <foreach collection="list" item="clockingDtl" index="index" separator=",">
            (
            #{clockingDtl.clockingId},#{clockingDtl.courseDtlId},#{clockingDtl.courseCode},
            #{clockingDtl.studentAccount},#{clockingDtl.state}
            )
        </foreach>
    </insert>


    <update id="update" parameterType="com.cms.domain.ClockingDtlInfo" >
        update t_clocking_dtl
        <set >
            <if test="clockingId != null" > clocking_id = #{clockingId,jdbcType=INTEGER},</if>
            <if test="courseDtlId != null" > course_dtl_id = #{courseDtlId,jdbcType=INTEGER},</if>
            <if test="courseCode != null" > course_code = #{courseCode,jdbcType=INTEGER},</if>
            <if test="studentAccount != null" > student_account = #{studentAccount,jdbcType=VARCHAR},</if>
            <if test="submitTime != null" > submit_time = #{submitTime,jdbcType=TIMESTAMP},</if>
            <if test="mac != null" > mac = #{mac,jdbcType=VARCHAR},</if>
            <if test="longitude != null" > longitude = #{longitude,jdbcType=DOUBLE},</if>
            <if test="latitude != null" > latitude = #{latitude,jdbcType=DOUBLE},</if>
            <if test="state != null" > state = #{state,jdbcType=INTEGER},</if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="list" parameterType="com.core.dao.query.Query" resultMap="BaseResultMap" >
        select <include refid="Base_Column_List" />  from t_clocking_dtl
        <include refid="whereReference" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>

    <select id="findOne" parameterType="com.core.dao.query.Query" resultMap="BaseResultMap" >
        select <include refid="Base_Column_List" />  from t_clocking_dtl
        <include refid="whereReference" />
        <include refid="rowLockReference"/>
    </select>

    <select id="count" parameterType="com.core.dao.query.Query" resultType="java.lang.Integer" >
        select count(*) from t_clocking_dtl
        <include refid="whereReference" />
    </select>

    <sql id="whereReference">
        <where>
            <foreach collection="filters" index="filter" item="value">
                <choose>
                    <when test="filter.operator == 'in' || filter.operator == 'not in'">
                        ${filter.calculation} ${filter.column} ${filter.operator}
                        <foreach collection="value" index="index" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </when>
                    <when test="filter.operator == 'between'">
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value.left} and #{value.right}
                    </when>
                    <when test="filter.calculation == 'or'">
                        <include refid="orFilter"/>
                    </when>
                    <otherwise>
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value}
                    </otherwise>
                </choose>
            </foreach>
        </where>
    </sql>

    <sql id="orFilter">
        ${filter.calculation}
        <foreach collection="value" index="subFilter" item="subValue" open="(" separator="and" close=")">
            <choose>
                <when test="subFilter.operator == 'in' || subFilter.operator == 'not in'">
                    ${subFilter.column} ${subFilter.operator}
                    <foreach collection="subValue" index="subIndex" item="subItem" open="(" separator="," close=")">
                        #{subItem}
                    </foreach>
                </when>
                <otherwise>
                    ${subFilter.column} ${subFilter.operator} #{subValue}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="orderReference">
        <if test="orders != null and orders.size > 0">
            order by
            <foreach collection="orders" index="order" item="value" separator="," >
                ${order.column} ${order.direction}
            </foreach>
        </if>
    </sql>

    <sql id="pageReference">
        <if test="pageParam != null">
            limit #{pageParam.start},#{pageParam.limit}
        </if>
    </sql>

    <sql id="rowLockReference">
        <if test="rowLock != null and rowLock == true">
            for update
        </if>
    </sql>
    <!--引入BaseMapper功能，若有新的sql语句，请在这里开始加入-->

    <resultMap id="BaseResultMapCourseDtlIds" type="java.lang.Integer">

    </resultMap>

    <select id="listClockingVO" parameterType="com.core.dao.query.Query" resultMap="BaseResultMapCourseDtlIds" >
        select t_clocking.course_dtl_id  from t_clocking,t_clocking_dtl
        <include refid="whereReferenceClockingVO" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>

    <sql id="whereReferenceClockingVO">
        <where>
            t_clocking.id = t_clocking_dtl.clocking_id
            <foreach collection="filters" index="filter" item="value">
                <choose>
                    <when test="filter.operator == 'in' || filter.operator == 'not in'">
                        ${filter.calculation} ${filter.column} ${filter.operator}
                        <foreach collection="value" index="index" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </when>
                    <when test="filter.operator == 'between'">
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value.left} and #{value.right}
                    </when>
                    <when test="filter.calculation == 'or'">
                        <include refid="orFilter"/>
                    </when>
                    <otherwise>
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value}
                    </otherwise>
                </choose>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List_StudentClockingDtlVO" >
        t_clocking_dtl.*, t_student.name AS student_name, t_course_dtl.date, t_course_dtl.place,
        t_course_dtl.schedule_name, t_course_dtl.course_name, t_clocking.submit_time AS teacher_submit_time,
        t_course_dtl.teacher_account, t_teacher.name AS teacher_name
    </sql>

    <select id="listStudentClockingDtlVO" parameterType="com.core.dao.query.Query" resultMap="BaseResultMapStudentClockingDtlVO" >
        select <include refid="Base_Column_List_StudentClockingDtlVO" />
        from t_student, t_clocking_dtl, t_course_dtl, t_clocking, t_teacher
        <include refid="whereReferenceStudentClockingDtlVO" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>

    <select id="countListStudentClockingDtlVO" parameterType="com.core.dao.query.Query" resultType="java.lang.Integer" >
        select count(*) from t_student,t_clocking_dtl,t_course_dtl, t_clocking, t_teacher
        <include refid="whereReferenceStudentClockingDtlVO" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>

    <resultMap id="BaseResultMapStudentClockingDtlVO" type="com.cms.dto.StudentClockingDtlDTO">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="clocking_id" property="clockingId" jdbcType="INTEGER" />
        <result column="course_dtl_id" property="courseDtlId" jdbcType="INTEGER" />
        <result column="course_code" property="courseCode" jdbcType="INTEGER" />
        <result column="date" property="date" jdbcType="DATE" />
        <result column="place" property="place" jdbcType="VARCHAR" />
        <result column="schedule_name" property="scheduleName" jdbcType="INTEGER" />
        <result column="student_name" property="studentName" jdbcType="VARCHAR" />
        <result column="course_name" property="courseName" jdbcType="VARCHAR" />
        <result column="teacher_account" property="teacherAccount" jdbcType="VARCHAR" />
        <result column="teacher_name" property="teacherName" jdbcType="VARCHAR" />
        <result column="student_account" property="studentAccount" jdbcType="VARCHAR" />
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />
        <result column="mac" property="mac" jdbcType="VARCHAR" />
        <result column="longitude" property="longitude" jdbcType="DOUBLE" />
        <result column="latitude" property="latitude" jdbcType="DOUBLE" />
        <result column="state" property="state" jdbcType="INTEGER" />
    </resultMap>

    <sql id="whereReferenceStudentClockingDtlVO">
        <where>
            t_student.account = t_clocking_dtl.student_account
            AND t_clocking_dtl.course_dtl_id = t_course_dtl.id
            AND t_clocking_dtl.clocking_id = t_clocking.id
            AND t_course_dtl.teacher_account = t_teacher.account
            <foreach collection="filters" index="filter" item="value">
                <choose>
                    <when test="filter.operator == 'in' || filter.operator == 'not in'">
                        ${filter.calculation} ${filter.column} ${filter.operator}
                        <foreach collection="value" index="index" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </when>
                    <when test="filter.operator == 'between'">
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value.left} and #{value.right}
                    </when>
                    <when test="filter.calculation == 'or'">
                        <include refid="orFilter"/>
                    </when>
                    <otherwise>
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value}
                    </otherwise>
                </choose>
            </foreach>
        </where>
    </sql>

    <resultMap id="BaseResultMapVO" type="com.cms.vo.ClockingDtlVO">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="clocking_id" property="clockingId" jdbcType="INTEGER" />
        <result column="teacher_account" property="teacherAccount" jdbcType="VARCHAR" />
        <result column="teacher_name" property="teacherName" jdbcType="VARCHAR" />
        <result column="course_dtl_id" property="courseDtlId" jdbcType="INTEGER" />
        <result column="course_code" property="courseCode" jdbcType="INTEGER" />
        <result column="course_name" property="courseName" jdbcType="VARCHAR" />
        <result column="student_account" property="studentAccount" jdbcType="VARCHAR" />
        <result column="student_name" property="studentName" jdbcType="VARCHAR" />
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />
        <result column="state" property="state" jdbcType="INTEGER" />

        <result column="mac" property="mac" jdbcType="VARCHAR" />
        <result column="longitude" property="longitude" jdbcType="DOUBLE" />
        <result column="latitude" property="latitude" jdbcType="DOUBLE" />

    </resultMap>

    <select id="listVO" parameterType="com.core.dao.query.Query" resultMap="BaseResultMapVO" >
        select  t_clocking_dtl.id, t_clocking_dtl.clocking_id, t_clocking.teacher_account, t_teacher.name AS teacher_name, t_clocking_dtl.course_dtl_id,
        t_clocking_dtl.course_code, t_course_dtl.course_name, t_clocking_dtl.student_account, t_student.name AS student_name,
        t_clocking_dtl.submit_time, t_clocking_dtl.state, t_clocking_dtl.mac, t_clocking_dtl.longitude, t_clocking_dtl.latitude
        from t_clocking_dtl, t_clocking, t_teacher, t_course_dtl, t_student
        <include refid="whereReferenceVO" />
        <include refid="orderReference" />
        <include refid="pageReference" />
    </select>
    <select id="countVO" parameterType="com.core.dao.query.Query" resultType="java.lang.Integer" >
        select count(*) from t_clocking_dtl, t_clocking, t_teacher, t_course_dtl, t_student
        <include refid="whereReferenceVO" />
    </select>

    <sql id="whereReferenceVO">
        <where>
            t_clocking_dtl.clocking_id = t_clocking.id
            AND t_teacher.account = t_clocking.teacher_account
            AND t_clocking_dtl.course_dtl_id = t_course_dtl.id
            AND t_student.account = t_clocking_dtl.student_account
            <foreach collection="filters" index="filter" item="value">
                <choose>
                    <when test="filter.operator == 'in' || filter.operator == 'not in'">
                        ${filter.calculation} ${filter.column} ${filter.operator}
                        <foreach collection="value" index="index" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </when>
                    <when test="filter.operator == 'between'">
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value.left} and #{value.right}
                    </when>
                    <when test="filter.calculation == 'or'">
                        <include refid="orFilter"/>
                    </when>
                    <otherwise>
                        ${filter.calculation} ${filter.column} ${filter.operator} #{value}
                    </otherwise>
                </choose>
            </foreach>
        </where>
    </sql>


    <update id="updateRepeat" parameterType="com.cms.domain.ClockingDtlInfo" >
        update t_clocking_dtl
        <set >
            submit_time = #{submitTime,jdbcType=TIMESTAMP},
            mac = #{mac,jdbcType=VARCHAR},
            longitude = #{longitude,jdbcType=DOUBLE},
            latitude = #{latitude,jdbcType=DOUBLE},
            state = #{state,jdbcType=INTEGER}
        </set>
        where clocking_id = #{clockingId,jdbcType=INTEGER}
    </update>
</mapper>